<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>博客模板示例</title>
    <url>/2020/10/29/bc-qd-1/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>全排序回溯</title>
    <url>/2020/10/29/bc-hd-1/</url>
    <content><![CDATA[<p>全排列可以说是最基本的部分了，不过实现的过程还是很有必要学习的，可以说难者不会，会者不难。</p>
<a id="more"></a>
<p>大体思路如下：</p>
<p>第一步：从n个数中选取第一个排列的第一个元素，如1；</p>
<p>第一步：从n个数中选取第一个排列的第二个元素，如2；</p>
<p>……</p>
<p>第n步：从n个数中选取第一个排列的第n个元素，如n；</p>
<p>当然不能选重复的。到此，第一个排列已经选出来了。那么第二个排列怎么选呢，其实很简单。</p>
<p>上一个排列执行到第n步后，这个函数不再执行，进行回溯，那么就会回到第n-1步，这时前面的n-1</p>
<p>个数都已经选过了，所以第n-1步选择的就会是n了，然后第n步选择的就是n-1；</p>
<p>所以第一个排列是：1 2 3 。。。n-1 n；</p>
<p>第二个是：1 2 3 。。。n n-1；</p>
<p>以此类推就会输出所有的排列，代码如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int n,a[100],v[100];</span><br><span class="line">//a数组用于保存每一次的排列，v数组用于判断数字是不是已经被选过 </span><br><span class="line">void dfs(int dp)//dp从1到n，执行n次，每次选择一个数 </span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(dp&gt;n)//dp为n+1的时候，就说明已经选了n个，可以输出了； </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">a[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		cout&lt;&lt;endl;</span></span><br><span class="line"><span class="string">		return;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	for(int i=1;i&lt;=n;i++) </span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		if(!v[i])//判断是不是选择过 </span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			a</span>[dp]=i;//保存当前选择 </span><br><span class="line">			v[i]=1;//标记这个数字，防止同一个排列选择相同的数字。 </span><br><span class="line">			dfs(dp+1);</span><br><span class="line">			v[i]=0;//回溯回来的时候一定要清楚标记，不然下一个排列就能选择了，这也是最关键的地方，仔细思考一下。 </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125; </span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">	&#123;</span><br><span class="line">		dfs(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>很明显，这是字典序。</p>
<p>还有另外一种实现的方法，有着很好的用处，可以方便的解决一些搜索的题目。</p>
<p>答题思路就是我选择了一个元素，那么就把这个元素交换到当前这个位置，就不用开一个数组标记了，直接给代码吧，兄弟们</p>
<p>可以自己用笔和纸走一遍，就会明白了，我认为这种思想很有用处的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;iostream&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line">int n,a[100];</span><br><span class="line">void dfs(int dp)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span>(dp&gt;n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;<span class="string">a[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		cout&lt;&lt;endl;</span></span><br><span class="line"><span class="string">		return;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	for(int i=dp;i&lt;=n;i++)</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		swap(a</span>[i],a[dp]);//交换 </span><br><span class="line">		dfs(dp+1);</span><br><span class="line">		swap(a[i],a[dp]);//回溯回来的时候一定要换回来 </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(int i=1;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i]=i;//初始化a数组， </span><br><span class="line">		&#125;</span><br><span class="line">		dfs(1);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>web安全</title>
    <url>/2020/10/30/aq-web-1/</url>
    <content><![CDATA[<p>网络信息安全攻防学习平台的write up</p>
<a id="more"></a>

<p>选择关：<br><a href="https://blog.csdn.net/baigoocn/article/details/51447705">https://blog.csdn.net/baigoocn/article/details/51447705</a></p>
<p>基本关：<br><a href="https://www.jianshu.com/p/1f51c3bd2f69?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation">https://www.jianshu.com/p/1f51c3bd2f69?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p>
<p>脚本关：<br><a href="https://blog.csdn.net/qq_31481187/article/details/52559718">https://blog.csdn.net/qq_31481187/article/details/52559718</a></p>
<p>注入关：<br><a href="https://blog.csdn.net/weixin_41924764/article/details/107095963">https://blog.csdn.net/weixin_41924764/article/details/107095963</a></p>
<p>上传关、解密关：<a href="https://blog.csdn.net/weixin_41924764/article/details/107667134">https://blog.csdn.net/weixin_41924764/article/details/107667134</a></p>
<p>综合关：<br><a href="http://cn-sec.com/archives/50425.html">http://cn-sec.com/archives/50425.html</a></p>
<p>创新关：<br>暂无</p>
]]></content>
      <categories>
        <category>安全</category>
        <category>Web</category>
      </categories>
  </entry>
  <entry>
    <title>皇后问题</title>
    <url>/2020/11/01/bc-hd-2/</url>
    <content><![CDATA[<p>皇后问题即任意两个皇后都不能处于同一行、同一列或同一斜线上，问有多少种摆法。<br>计算机发明后，有多种计算机语言可以编程解决此问题。</p>
<a id="more"></a>

<h1 id="回溯法和DFS的区别"><a href="#回溯法和DFS的区别" class="headerlink" title="回溯法和DFS的区别"></a>回溯法和DFS的区别</h1><p>解决这个皇后问题，需要用到回溯法，回溯法和深度优先算法，总感觉它们的思路其实是差不多的。回溯法是求问题的解，使用的是DFS（深度优先搜索）。在DFS的过程中发现不是问题的解，那么就开始回溯到上一层或者上一个节点。DFS是遍历整个搜索空间，而不管是否是问题的解。所以更觉得回溯法是DFS的一种应用，DFS更像是一种工具。</p>
<h1 id="一-构造数组和定义"><a href="#一-构造数组和定义" class="headerlink" title="一 构造数组和定义"></a>一 构造数组和定义</h1><p>这里用到的思想是c[i]=j; i为第几行，j为第几列。这种方法有个好处就是比二维数组占用空间较小，当然，这样的话运行自然会快些。<br>n为皇后的数量，cnt为可以排列的方法数量。</p>
<h1 id="二-构造算法"><a href="#二-构造算法" class="headerlink" title="二 构造算法"></a>二 构造算法</h1><p>主函数输入皇后数量，开始函数，最终输入皇后数量<br>print函数负责输出皇后可行的情况。<br>search为该算法的核心。<br>这里通过回溯法来实现。进到深层赋值，最终跳回前面判断，若是失败继续前进。<br>其间通过判断行、列、斜线是否有两个皇后。</p>
<h1 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int c[10], n = 0, cnt = 0;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">print</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (int i = 0; i&lt;n; ++i) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (int j = 0; j&lt;n; ++j) &#123;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (j == c[i]) cout &lt;&lt; <span class="string">&quot;Q &quot;</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;. &quot;</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		cout &lt;&lt; <span class="string">endl;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">   cout &lt;&lt; endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void search(int r) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (r == n) &#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">print</span>();</span><br><span class="line"></span><br><span class="line">		++cnt;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">return</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (int i = 0; i&lt;n; ++i) &#123;</span><br><span class="line"></span><br><span class="line">		c[r] = i;</span><br><span class="line"></span><br><span class="line">		int ok = 1;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (int j = 0; j&lt;r; ++j)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span> (c[r] == c[j] || r - j == c[r] - c[j] || r - j == c[j] - c[r]) &#123;</span><br><span class="line"></span><br><span class="line">				ok = 0;</span><br><span class="line"></span><br><span class="line">				<span class="built_in">break</span>;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (ok) search(r + 1);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">	search(0);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">cnt &lt;&lt; endl;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程</category>
        <category>后端</category>
      </categories>
  </entry>
  <entry>
    <title>博客教程</title>
    <url>/2020/10/29/bc-qd-2/</url>
    <content><![CDATA[<p>安装hexo博客教程<br>一般我们要搭建一个个人的博客站点需要买服务器、域名，装各种运行环境等等，非常的费钱费力。</p>
<p>其实就算没有这些，我们也是照样可以通过Hexo框架结合GitHub Pages搭建一个自己的博客站点的。</p>
<a id="more"></a>

<p>#Hexo<br>这个博客框架没有那么重量级，它是 MarkDown 直接写文章的，然后 Hexo 可以直接将文章编译成静态网页文件并发布，所以这样文章的内容、标题、标签等信息就没必要存数据库里面了，是直接纯静态页面了，这就解决了数据库的问题。</p>
<h1 id="GitHub账号"><a href="#GitHub账号" class="headerlink" title="GitHub账号"></a>GitHub账号</h1><p>域名(可选)<br>首先在 GitHub 新建一个仓库（Repository），名称为 {username}.github.io，注意这个名比较特殊，必须要是 github.io 为后缀结尾的。比如我的用户名是Khaos，那么就新建一个Khaos.github.io的仓库。</p>
<h1 id="SSH-Key密钥"><a href="#SSH-Key密钥" class="headerlink" title="SSH-Key密钥"></a>SSH-Key密钥</h1><p>因为后期我们更新文章或者提交代码需要有相应的权限才可以，通过用户名和密码不方便且不安全，所以非常有必要配置SSH-Key密钥。</p>
<p>cd ~/. ssh<br>ssh-keygen -t rsa -C “邮件地址”</p>
<p>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：</p>
<p>ssh -T <a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#x74;&#64;&#x67;&#x69;&#x74;&#x68;&#117;&#x62;&#46;&#99;&#x6f;&#x6d;</a><br>git config –global user.name “Khaos”<br>git config –global user.email  “<a href="mailto:&#x4b;&#x68;&#97;&#x6f;&#x73;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x4b;&#x68;&#97;&#x6f;&#x73;&#64;&#103;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a>“</p>
<h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>首先在自己的电脑上安装 Node.js，下载地址：<a href="https://nodejs.org/zh-cn/download/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%89%E8%A3%85">https://nodejs.org/zh-cn/download/，可以安装</a> Stable 版本。</p>
<p>安装完毕之后，确保环境变量配置好，能正常使用 npm 命令。</p>
<p>npm –version</p>
<h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo是一个博客框架，Hexo 官方还提供了一个命令行工具，用于快速创建项目、页面、编译、部署 Hexo 博客，所以在这之前我们需要先安装 Hexo 的命令行工具。</p>
<p>sudo npm install -g hexo-cli</p>
<p>安装完毕之后，确保环境变量配置好，能正常使用 hexo 命令。</p>
<p>hexo –version</p>
<p>使用 Hexo 的命令行创建一个项目，并将其在本地跑起来，整体跑通看看。</p>
<p>首先使用如下命令创建项目：</p>
<p>hexo init {name}</p>
<p>这里的name就是项目名，我这里要创建Khaos的博客，我就把项目取名为Khaos了，用了纯小写，命令如下：</p>
<p>hexo init Khaos</p>
<p>这样Khaos文件夹下就会出现 Hexo 的初始化文件，包括 themes、scaffolds、source 等文件夹。</p>
<p>首先进入新生成的文件夹里面，然后调用 Hexo 的 generate 命令，将 Hexo 编译生成 HTML 代码，命令如下：</p>
<p>hexo generate</p>
<p>可以看到输出结果里面包含了 js、css、font 等内容，并发现他们都处在了项目根目录下的 public 文件夹下面了。</p>
<p>利用 Hexo 提供的 serve 命令把博客在本地运行起来，命令如下：</p>
<p>hexo serve</p>
<p>项目成功运行在本地的4000端口上，浏览器访问<a href="http://localhost:4000：">http://localhost:4000：</a></p>
<p>将这个初始化的博客进行一下部署，放到 GitHub Pages 上面验证一下其可用性。成功之后我们可以再进行后续的修改，比如修改主题、修改页面配置等等。</p>
<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Hexo 已经给我们提供一个命令，利用它我们可以直接将博客一键部署，不需要手动去配置服务器或进行其他的各项配置。</p>
<p>打开根目录下的 _config.yml 文件，找到 Deployment 这个地方，把刚才新建的 Repository 的地址贴过来，然后指定分支为 master 分支，最终修改为如下内容：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/Khaos/Khaos.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  ``` </span><br><span class="line">需要额外安装一个支持 Git 的部署插件，名字叫做hexo-deployer-git，有了它我们才可以顺利将其部署到 GitHub 上面，如果不安装的话，在执行部署命令时会报如下错误：</span><br><span class="line"></span><br><span class="line">Deployer not found: git</span><br><span class="line">安装hexo-deployer-git插件的命令如下：</span><br><span class="line"></span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">安装成功后，执行部署命令：</span><br><span class="line"></span><br><span class="line">hexo deploy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">如果出现类似上面的内容，就证明我们的博客已经成功部署到 GitHub Pages 上面了，这时候我们访问一下 GitHub Repository 同名的链接，比如我的Khaos博客的 Repository 名称取的是Khaos.github.io，那我就访问 http://Khaos.github.io，这时候我们就可以看到跟本地一模一样的博客内容了。</span><br><span class="line"></span><br><span class="line">查看一下GitHub上的内容：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">这些内容实际上是博客文件夹下面的 public 文件夹下的所有内容，Hexo 把编译之后的静态页面内容上传到 GitHub 的 master 分支上面去了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">那我博客的源码也想放到 GitHub 上面怎么办呢？其实很简单，新建一个其他的分支就好了，比如我这边就新建了一个 <span class="built_in">source</span> 分支，代表博客源码的意思。</span><br><span class="line"></span><br><span class="line">具体的添加过程就很简单了，参加如下命令：</span><br><span class="line">``` bash</span><br><span class="line">git init    <span class="comment"># 初始化项目</span></span><br><span class="line">git checkout -b <span class="built_in">source</span>    <span class="comment"># 创建并切换到source分支</span></span><br><span class="line">git add -A    <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;init blog&quot;</span>    <span class="comment"># 提交并注释</span></span><br><span class="line">git remote add origin git@github.com:Khaos/Khaos.github.io.git    <span class="comment"># 添加到远程仓库</span></span><br><span class="line">git push origin <span class="built_in">source</span>    <span class="comment"># 将代码提交到远程的source分支</span></span><br><span class="line">在GitHub仓库中可以看到已经有两个分支：</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">完成如上内容之后，实际上我们只完成了博客搭建的一小步，因为我们仅仅是把初始化的页面部署成功了，博客里面还没有设置任何有效的信息。下面就让我们来进行一下博客的基本配置，另外换一个好看的主题，配置一些其他的内容，让博客真正变成属于我们自己的博客吧。</span><br><span class="line"></span><br><span class="line">修改根目录下的 _config.yml 文件，找到 Site 区域，这里面可以配置站点标题 title、副标题 subtitle 等内容、关键字 keywords 等内容，比如我的就修改为如下内容：</span><br><span class="line">``` bash</span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Khaos</span><br><span class="line">subtitle: 一个运维小菜鸡的个人博客网站。</span><br><span class="line">description: 记录学习、工作和生活中遇到的各种问题。</span><br><span class="line">keywords: <span class="string">&quot;运维, Python, Shell, ...&quot;</span></span><br><span class="line">author: StaryJie</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p>hexo serve在本地运行并在浏览器中打开测试：</p>
<p>目前 Hexo 里面应用最多的主题基本就是 Next 主题了，个人感觉这个主题还是挺好看的，另外它支持的插件和功能也极为丰富，配置了这个主题，我们的博客可以支持更多的扩展功能，比如阅览进度条、中英文空格排版、图片懒加载等等。</p>
<p>目前 Next 主题已经更新到 7.x 版本了，我们可以直接到 Next 主题的 GitHub Repository 上把这个主题下载下来。</p>
<p>首先命令行进入到项目的根目录，执行如下命令即可：</p>
<p>git clone <a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a> themes/next</p>
<p>执行完毕之后 Next 主题的源码就会出现在项目的 themes/next 文件夹下。</p>
<p>修改下博客所用的主题名称，修改项目根目录下的 _config.yml 文件，找到 theme 字段，修改为 next 即可，修改如下：</p>
<p>theme: next<br>然后本地重新开启服务，访问刷新下页面，就可以看到 next 主题就切换成功了，预览效果如下：</p>
<p>现在我们已经成功切换到 next 主题上面了，接下来我们就对主题进行进一步地详细配置吧，比如修改样式、增加其他各项功能的支持。</p>
<p>Next 主题内部也提供了一个配置文件，名字同样叫做 _config.yml，只不过位置不一样，它在 themes/next 文件夹下，Next 主题里面所有的功能都可以通过这个配置文件来控制，下文所述的内容都是修改的 themes/next/_config.yml 文件。</p>
<p>Next 主题还提供了多种样式，风格都是类似黑白的搭配，但整个布局位置不太一样，通过修改配置文件的 scheme 字段即可，我选了 Pisces 样式，修改 _config.yml （注意是 themes/next/_config.yml 文件）如下：</p>
<p>scheme: Pisces<br>另外还有几个可选项，比如：</p>
<p>#scheme: Muse<br>#scheme: Mist<br>scheme: Pisces<br>#scheme: Gemini<br>重新在本地运行，浏览器查看就已经变成Pisces样式了：</p>
<p>favicon 就是站点标签栏的小图标，默认是用的 Hexo 的小图标，如果我们有站点 Logo 的图片的话，我们可以自己定制小图标。</p>
<p>但这并不意味着我们需要自己用 PS 自己来设计，已经有一个网站可以直接将图片转化为站点小图标，站点链接为：<a href="https://realfavicongenerator.net,到这里上传一张图,便可以直接打包下载各种尺寸和适配不同设备的小图标./">https://realfavicongenerator.net，到这里上传一张图，便可以直接打包下载各种尺寸和适配不同设备的小图标。</a></p>
<p>图标下载下来之后把它放在 themes/next/source/images 目录下面。</p>
<p>然后在配置文件里面找到 favicon 配置项，把一些相关路径配置进去即可，示例如下：</p>
<p>favicon:<br>  small: /images/favicon-16x16.png<br>  medium: /images/favicon-32x32.png<br>  apple_touch_icon: /images/apple-touch-icon.png<br>  safari_pinned_tab: /images/safari-pinned-tab.svg<br>配置完成之后刷新页面，整个页面的标签图标就被更新了。</p>
<p>avatar 这个就类似站点的头像，如果设置了这个，会在站点的作者信息旁边额外显示一个头像，比如我这边有一张 avatar.png 图片：</p>
<p>将其放置到 themes/next/source/images/avatar.png 路径，然后在主题 _config.yml 文件下编辑 avatar 的配置，修改为正确的路径即可。</p>
<p>配置完成之后刷新页面，头像的图片就会显示出来。</p>
<p>博客一般是需要 RSS 订阅的，如果要开启 RSS 订阅，这里需要安装一个插件，叫做 hexo-generator-feed，安装完成之后，站点会自动生成 RSS Feed 文件，安装命令如下：</p>
<p>npm install hexo-generator-feed –save</p>
<p>在项目根目录下运行这个命令，安装完成之后不需要其他的配置，以后每次编译生成站点的时候就会自动生成 RSS Feed 文件了。</p>
<p>作为一个为程序员，虽然代码敲的不咋样，但是代码块的显示还是需要很讲究的，默认的代码块我个人不是特别喜欢，因此我把代码的颜色修改为黑色，并把复制按钮的样式修改为类似 Mac 的样式，修改 _config.yml 文件的 codeblock 区块如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">codeblock:</span><br><span class="line">  highlight_theme: night bright</span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  copy_button:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    show_result: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    style: mac</span><br></pre></td></tr></table></figure>
<p>我们在浏览网页的时候，如果已经看完了想快速返回到网站的上端，一般都是有一个按钮来辅助的，这里也支持它的配置，修改 _config.yml 的 back2top 字段即可，我的设置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">back2top:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  sidebar: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  scrollpercent: <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>enable 默认为 true，即默认显示。sidebar 如果设置为 true，按钮会出现在侧栏下方，个人觉得并不是很好看，就取消了，scrollpercent 就是显示阅读百分比，个人觉得还不错，就将其设置为 true。</p>
<p>reading_process，阅读进度。大家可能注意到有些站点的最上侧会出现一个细细的进度条，代表页面加载进度和阅读进度，如果大家想设置的话也可以试试，我将其打开了，修改 _config.yml 如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line">reading_progress:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  position: top</span><br><span class="line">  color: <span class="string">&quot;#222&quot;</span></span><br><span class="line">  height: 2px</span><br></pre></td></tr></table></figure>


<p>书签，可以根据阅读历史记录，在下次打开页面的时候快速帮助我们定位到上次的位置，大家可以根据喜好开启和关闭，我的配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bookmark:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Customize the color of the bookmark.</span></span><br><span class="line">  color: <span class="string">&quot;#222&quot;</span></span><br><span class="line">  <span class="comment"># If auto, save the reading progress when closing the page or clicking the bookmark-icon.</span></span><br><span class="line">  <span class="comment"># If manual, only save it by clicking the bookmark-icon.</span></span><br><span class="line">  save: auto</span><br></pre></td></tr></table></figure>
<p>在一些技术博客上，大家可能注意到在页面的右上角有个 GitHub 图标，点击之后可以跳转到其源码页面，可以为 GitHub Repository 引流，大家如果想显示的话可以自行选择打开，我的配置如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">github_banner:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  permalink: https://github.com/Khaos/Khaos.github.io.git</span><br><span class="line">  title: Follow Khaos on GitHub</span><br></pre></td></tr></table></figure>


<p>由于 Hexo 的博客是静态博客，而且也没有连接数据库的功能，所以它的评论功能是不能自行集成的，但可以集成第三方的服务。</p>
<p>Next 主题里面提供了多种评论插件的集成，有 changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte 这些。</p>
<p>首先需要在 GitHub 上面注册一个 OAuth Application，链接为：<a href="https://github.com/settings/applications/new%EF%BC%8C%E6%B3%A8%E5%86%8C%E5%AE%8C%E6%AF%95%E4%B9%8B%E5%90%8E%E6%8B%BF%E5%88%B0">https://github.com/settings/applications/new，注册完毕之后拿到</a> Client ID、Client Secret 就可以了。</p>
<p>首先需要在 _config.yml 文件的 comments 区域配置使用 gitalk：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Multiple Comment System Support</span></span><br><span class="line">comments:</span><br><span class="line">  <span class="comment"># Available values: tabs | buttons</span></span><br><span class="line">  style: tabs</span><br><span class="line">  <span class="comment"># Choose a comment system to be displayed by default.</span></span><br><span class="line">  <span class="comment"># Available values: changyan | disqus | disqusjs | facebook_comments_plugin | gitalk | livere | valine | vkontakte</span></span><br><span class="line">  active: gitalk</span><br></pre></td></tr></table></figure>
<p>主要是 comments.active 字段选择对应的名称即可。</p>
<p>然后找打 gitalk 配置，添加它的各项配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Gitalk</span></span><br><span class="line"><span class="comment"># Demo: https://gitalk.github.io</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  github_id: Khaos</span><br><span class="line">  repo: Khaos.github.io</span><br><span class="line">  client_id: cb34a61011c438548cec</span><br><span class="line">  client_secret: 3d9c756a081ce2b91a6a286eb1a0a02a71ced6ca</span><br><span class="line">  admin_user: Khaos</span><br><span class="line">  distraction_free_mode: <span class="literal">true</span> <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">  <span class="comment"># Gitalk&#x27;s display language depends on user&#x27;s browser or system environment</span></span><br><span class="line">  <span class="comment"># If you want everyone visiting your site to see a uniform language, you can set a force language value</span></span><br><span class="line">  <span class="comment"># Available values: en | es-ES | fr | ru | zh-CN | zh-TW</span></span><br><span class="line">  language: zh-CN</span><br></pre></td></tr></table></figure>



<p>GitHub 授权登录之后就可以使用了，评论的内容会自动出现在 Issue 里面。</p>
<p>如果你习惯在中文和英文之间留空格的话，pangu 就是来解决这个问题的，我们只需要在主题里面开启这个选项，在编译生成页面的时候，中英文之间就会自动添加空格，看起来更加美观。</p>
<p>具体的修改如下：</p>
<p>pangu: true<br>可能在一些情况下我们需要写一个公式，比如演示一个算法推导过程，MarkDown 是支持公式显示的，Hexo 的 Next 主题同样是支持的。</p>
<p>Next 主题提供了两个渲染引擎，分别是 mathjax 和 katex，后者相对前者来说渲染速度更快，而且不需要 JavaScript 的额外支持，但后者支持的功能现在还不如前者丰富，具体的对比可以看官方文档：<a href="https://theme-next.org/docs/third-party-services/math-equations%E3%80%82">https://theme-next.org/docs/third-party-services/math-equations。</a></p>
<p>这里选择了 mathjax，通过修改配置即可启用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Default (true) will load mathjax / katex script on demand.</span></span><br><span class="line">  <span class="comment"># That is it only render those page which has `mathjax: true` in Front-matter.</span></span><br><span class="line">  <span class="comment"># If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span></span><br><span class="line">  per_page: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span></span><br><span class="line">  mathjax:</span><br><span class="line">    <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">    <span class="comment"># See: https://mhchem.github.io/MathJax-mhchem/</span></span><br><span class="line">    mhchem: <span class="literal">true</span></span><br><span class="line">mathjax 的使用需要我们额外安装一个插件，叫做 hexo-renderer-kramed，另外也可以安装 hexo-renderer-pandoc，命令如下：</span><br><span class="line"></span><br><span class="line">npm un hexo-renderer-marked --save</span><br><span class="line">npm i hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure>
<p>另外还有其他的插件支持，大家可以到官方文档查看。</p>
<p>可能大家听说过 Ajax，没听说过 pjax，这个技术实际上就是利用 Ajax 技术实现了局部页面刷新，既可以实现 URL 的更换，有可以做到无刷新加载。</p>
<p>要开启这个功能需要先将 pjax 功能开启，然后安装对应的 pjax 依赖库，首先修改 _config.yml 修改如下：</p>
<p>pjax: true<br>然后安装依赖库，切换到 next 主题下，然后安装依赖库：</p>
<p>cd themes/next<br>git clone <a href="https://github.com/theme-next/theme-next-pjax">https://github.com/theme-next/theme-next-pjax</a> source/lib/pjax<br>这样 pjax 就开启了，页面就可以实现无刷新加载了。</p>
<p>参考官方文档：<a href="https://theme-next.org/docs/%E3%80%82">https://theme-next.org/docs/。</a></p>
<p>Hexo默认安装完就会有一篇文章，我们需要借助hexo命令添加新的文章：</p>
<p>hexo new hello-hexo<br>创建的文章会出现在 source/_posts 文件夹下，是 MarkDown 格式。</p>
<p>在文章开头通过如下格式添加必要信息：</p>
<hr>
<p>title: 标题 # 自动创建，如 hello-world<br>date: 日期 # 自动创建，如 2019-09-22 01:47:21<br>tags: </p>
<ul>
<li>标签1</li>
<li>标签2</li>
<li>标签3<br>categories:</li>
<li>分类1</li>
<li>分类2</li>
</ul>
<hr>
<p>开头下方撰写正文，MarkDown 格式书写即可。</p>
<p>这样在下次编译的时候就会自动识别标题、时间、类别等等，另外还有其他的一些参数设置，可以参考文档：<a href="https://hexo.io/zh-cn/docs/writing.html%E3%80%82">https://hexo.io/zh-cn/docs/writing.html。</a></p>
<p>默认情况下hexo博客(如本站)的首页显示的是完整的文章 – 而文章比较长的时候这无疑会带来诸多不便。只要加入一个<!-- more -->这样的占位符在文章正文里面即可：</p>
<p>这就是一个简介</p>
<!-- more -->

<p>这里更多的内容<br>本地运行刷新后效果如下：</p>
<p>现在我们的博客只有首页、文章页，如果我们想要增加标签页，可以自行添加，这里 Hexo 也给我们提供了这个功能，在根目录执行命令如下：</p>
<p>hexo new page tags<br>执行这个命令之后会自动帮我们生成一个 source/tags/index.md 文件，内容就只有这样子的：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-09-27 11:42:49</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>我们可以自行添加一个 type 字段来指定页面的类型：</p>
<p>type: tags<br>comments: false<br>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  <span class="comment">#categories: /categories/ || th</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>



<p>可以看到左侧导航也出现了标签，点击之后右侧会显示标签的列表。</p>
<p>分类功能和标签类似，一个文章可以对应某个分类，如果要增加分类页面可以使用如下命令创建：</p>
<p>hexo new page categories<br>然后同样地，会生成一个 source/categories/index.md 文件。</p>
<p>我们可以自行添加一个 type 字段来指定页面的类型：</p>
<p>type: categories<br>comments: false<br>然后再在主题的 _config.yml 文件将这个页面的链接添加到主菜单里面，修改 menu 字段如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>



<p>很多情况下我们需要搜索全站的内容，所以一个搜索功能的支持也是很有必要的。</p>
<p>如果要添加搜索的支持，需要先安装一个插件，叫做 hexo-generator-searchdb，命令如下：</p>
<p>npm install hexo-generator-searchdb –save<br>然后在项目的 _config.yml 里面添加搜索设置如下：</p>
<p>search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000<br>然后在主题的 _config.yml 里面修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/wzpan/hexo-generator-search</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 5</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br><span class="line">``` </span><br><span class="line">这里用的是 Local Search，如果想启用其他是 Search Service 的话可以参考官方文档：https://theme-next.org/docs/third-party-services/search-services。</span><br><span class="line"></span><br><span class="line">另外还需要添加一个 404 页面，直接在根目录 <span class="built_in">source</span> 文件夹新建一个 404.md 文件即可，内容可以仿照如下：</span><br><span class="line">``` bash</span><br><span class="line">---</span><br><span class="line">title: 404 Not Found</span><br><span class="line">date: 2019-09-27 12:21:37</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;center&gt;</span><br><span class="line">对不起，您所访问的页面不存在或者已删除。</span><br><span class="line">您可以&lt;a href=<span class="string">&quot;https://blog.Khaos.com&gt;&quot;</span>&gt;点击此处&lt;/a&gt;返回首页。</span><br><span class="line">&lt;/center&gt;</span><br><span class="line"></span><br><span class="line">&lt;blockquote class=<span class="string">&quot;blockquote-center&quot;</span>&gt;</span><br><span class="line">    59Dveops</span><br><span class="line">&lt;/blockquote&gt;</span><br></pre></td></tr></table></figure>
<p>这里面的一些相关信息和链接可以替换成自己的。</p>
<p>其实 Hexo 还有很多很多功能，可以直接参考官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a> 查看更多的配置。</p>
<p>最后我这边还增加了一个简易版的部署脚本，其实就是重新 gererate 下文件，然后重新部署。在根目录下新建一个 deploy.sh 的脚本文件，内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>这样我们在部署发布的时候只需要执行：</p>
<p>sh deploy.sh<br>就可以完成博客的更新了，非常简单。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>前端</category>
      </categories>
  </entry>
</search>
